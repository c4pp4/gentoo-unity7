From 8d995e644cb358352786bb860b45aa80e47b5dd3 Mon Sep 17 00:00:00 2001
From: c4pp4
Date: Wed, 23 Jul 2025 14:30:19 +0200
Subject: [PATCH 1/1] Various improvements

Signed-off-by: c4pp4
---
 ChangeLog    |  9 +++++++++
 README.md    |  6 ++++++
 gtk3-nocsd.c | 20 ++++++++++++++++++--
 3 files changed, 33 insertions(+), 2 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 2f98771..3e93cba 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,6 +1,15 @@
 gtk3-nocsd ChangeLog
 ====================
 
+New in version 4 (unreleased)
+-----------------------------
+
+  * Support python-gi again by not caching the result of the version
+    check if Gtk is not yet loaded. (python-gi loads Glib before it
+    loads Gtk.)
+  * Handle the case when both Gtk+3 and Gtk+2 are loaded (e.g. via
+    different plugins), but Gtk+2 is used.
+
 New in version 3
 ----------------
 
diff --git a/README.md b/README.md
index 54f154d..1319edd 100644
--- a/README.md
+++ b/README.md
@@ -49,6 +49,9 @@ This is how the gtk3 windows look like before and after using
         export GTK_CSD=0
         export LD_PRELOAD=<"full path" of your libgtk3-nocsd.so.0 file>
 
+* On Arch Linux, you should use `~/.xsession` instead of `~/.bashrc`
+  for the CSDs to be disabled properly.
+
 * On Debian-based systems with graphical login, instead modify (or
   create) `~/.xsessionrc` and add the following code:
 
@@ -79,6 +82,9 @@ The Debian package already comes with integration code to automatically
 disable CSDs when installed, so after package installation only a
 re-login is required to have CSDs disabled on non-GNOME desktops.
 
+There is also a [gtk3-nocsd-git](https://aur.archlinux.org/packages/gtk3-nocsd-git/)
+package for Arch Linux.
+
 #How it works:
 
 `$LD_PRELOAD` is used to override several Gdk and glib/gobject APIs to
diff --git a/gtk3-nocsd.c b/gtk3-nocsd.c
index b07bea0..3a9aa19 100644
--- a/gtk3-nocsd.c
+++ b/gtk3-nocsd.c
@@ -507,6 +507,21 @@ static gboolean is_compatible_gtk_version() {
     return is_compatible_gtk_version_cached;
 }
 
+static gboolean is_gtk4_version() {
+    void *gtk4_handle = dlopen("libgtk-4.so.1", RTLD_LAZY | RTLD_NOLOAD);
+    void *adwaita_handle = dlopen("libadwaita-1.so.0", RTLD_LAZY | RTLD_NOLOAD);
+
+    if (gtk4_handle) {
+        dlclose(gtk4_handle);
+        return TRUE;
+    }
+    if (adwaita_handle) {
+        dlclose(adwaita_handle);
+        return TRUE;
+    }
+    return FALSE;
+}
+
 static void set_has_custom_title(GtkWindow* window, gboolean set) {
     g_object_set_data(G_OBJECT(window), "custom_title", set ? GINT_TO_POINTER(1) : NULL);
 }
@@ -813,7 +828,8 @@ extern void g_object_get (gpointer _object, const gchar *first_property_name, ..
      * g_object_get(). */
 
     va_start (var_args, first_property_name);
-    if (are_csd_disabled()) {
+
+    if (are_csd_disabled() && !is_gtk4_version()) {
         name = first_property_name;
         while (name) {
             GValue value = G_VALUE_INIT;
@@ -1230,7 +1246,7 @@ gint g_type_add_instance_private (GType class_type, gsize private_size)
     } else if (G_UNLIKELY (class_type == gtk_header_bar_type && gtk_header_bar_private_size == 0)) {
         gtk_header_bar_private_size = private_size;
         gtk_header_bar_private_offset = orig_g_type_add_instance_private (class_type, private_size);
-        return gtk_window_private_offset;
+        return gtk_header_bar_private_offset;
     }
     return orig_g_type_add_instance_private (class_type, private_size);
 }
-- 
2.49.1

