From 3522688e1f158bdadc69ab53c10ef009565be881 Mon Sep 17 00:00:00 2001
From: c4pp4
Date: Fri, 7 Apr 2023 18:34:26 +0200
Subject: [PATCH 1/1] Revert Ubuntu Unity changes

Disable (buggy) panel transparency, revert panel shadow, panel padding,
launcher and dash icon size, online search tooltip and drag & drop.

Signed-off-by: c4pp4
---
 launcher/BFBLauncherIcon.cpp          |  4 +-
 launcher/Launcher.cpp                 | 73 +++++++++++++++++++++++++--
 panel/PanelController.cpp             |  2 +-
 panel/PanelIndicatorsView.cpp         |  1 -
 plugins/unityshell/src/unityshell.cpp | 64 +++++++++++++++++++++++
 plugins/unityshell/unityshell.xml.in  |  2 +-
 unity-shared/DashStyle.cpp            | 51 ++++++++++++++-----
 7 files changed, 177 insertions(+), 20 deletions(-)

diff --git a/launcher/BFBLauncherIcon.cpp b/launcher/BFBLauncherIcon.cpp
index eece73a..68ff72d 100644
--- a/launcher/BFBLauncherIcon.cpp
+++ b/launcher/BFBLauncherIcon.cpp
@@ -143,7 +143,9 @@ void BFBLauncherIcon::UpdateDefaultSearchText()
 {
     auto home_scope = reader_->GetScopeDataById("home.scope");
 
-    tooltip_text = _("Search your computer");
+    tooltip_text = ((Settings::Instance().remote_content) ?
+                    _("Search your computer and online sources") :
+                    _("Search your computer"));
 
     if (home_scope)
     {
diff --git a/launcher/Launcher.cpp b/launcher/Launcher.cpp
index a4f880a..2388ee3 100644
--- a/launcher/Launcher.cpp
+++ b/launcher/Launcher.cpp
@@ -2806,16 +2806,81 @@ int Launcher::GetDragDelta() const
 }
 
 void Launcher::DndStarted(std::string const& data)
-{ }
+{
+#ifdef USE_X11
+  SetDndQuirk();
+
+  dnd_data_.Fill(data.c_str());
+
+  auto const& uris = dnd_data_.Uris();
+  if (std::find_if(uris.begin(), uris.end(), [this] (std::string const& uri)
+                   {return DndIsSpecialRequest(uri);}) != uris.end())
+  {
+    steal_drag_ = true;
+
+    if (IsOverlayOpen())
+      SaturateIcons();
+  }
+  else
+  {
+    for (auto const& it : *model_)
+    {
+      if (it->ShouldHighlightOnDrag(dnd_data_))
+      {
+        it->SetQuirk(AbstractLauncherIcon::Quirk::DESAT, false, monitor());
+        it->SetQuirk(AbstractLauncherIcon::Quirk::UNFOLDED, true, monitor());
+      }
+      else
+      {
+        it->SetQuirk(AbstractLauncherIcon::Quirk::DESAT, true, monitor());
+        it->SetQuirk(AbstractLauncherIcon::Quirk::UNFOLDED, false, monitor());
+      }
+    }
+  }
+#endif
+}
 
 void Launcher::DndFinished()
-{ }
+{
+#ifdef USE_X11
+  UnsetDndQuirk();
+
+  data_checked_ = false;
+
+  DndReset();
+#endif
+}
 
 void Launcher::SetDndQuirk()
-{ }
+{
+#ifdef USE_X11
+  hide_machine_.SetQuirk(LauncherHideMachine::EXTERNAL_DND_ACTIVE, true);
+#endif
+}
 
 void Launcher::UnsetDndQuirk()
-{ }
+{
+#ifdef USE_X11
+
+  if (IsOverlayOpen() && !hovered_)
+  {
+    DesaturateIcons();
+  }
+  else
+  {
+    for (auto const& it : *model_)
+    {
+      it->SetQuirk(AbstractLauncherIcon::Quirk::DESAT, false, monitor());
+      it->SetQuirk(AbstractLauncherIcon::Quirk::UNFOLDED, false, monitor());
+    }
+  }
+
+
+  hide_machine_.SetQuirk(LauncherHideMachine::MT_DRAG_OUT, drag_out_delta_x_ >= DRAG_OUT_PIXELS - 90.0f);
+  hide_machine_.SetQuirk(LauncherHideMachine::EXTERNAL_DND_ACTIVE, false);
+  animation::SetValue(dnd_hide_animation_, animation::Direction::BACKWARD);
+#endif
+}
 
 } // namespace launcher
 } // namespace unity
diff --git a/panel/PanelController.cpp b/panel/PanelController.cpp
index c6496b7..f24eb46 100644
--- a/panel/PanelController.cpp
+++ b/panel/PanelController.cpp
@@ -66,7 +66,7 @@ Controller::Impl::Impl(Controller* parent, menu::Manager::Ptr const& indicators,
   : parent_(parent)
   , indicators_(indicators)
   , edge_barriers_(edge_barriers)
-  , opacity_(0.7f)
+  , opacity_(1.0f)
   , opacity_maximized_toggle_(false)
 {
   UScreen* screen = UScreen::GetDefault();
diff --git a/panel/PanelIndicatorsView.cpp b/panel/PanelIndicatorsView.cpp
index 8bf3c80..20f0638 100644
--- a/panel/PanelIndicatorsView.cpp
+++ b/panel/PanelIndicatorsView.cpp
@@ -46,7 +46,6 @@ PanelIndicatorsView::PanelIndicatorsView()
 {
   opacity.DisableNotifications();
   layout_->SetContentDistribution(nux::MAJOR_POSITION_END);
-  layout_->SetLeftAndRightPadding(layout_->GetLeftPadding(), 6);
   SetLayout(layout_);
 
   LOG_DEBUG(logger) << "Indicators View Added: ";
diff --git a/plugins/unityshell/src/unityshell.cpp b/plugins/unityshell/src/unityshell.cpp
index 38f433a..ff739f6 100644
--- a/plugins/unityshell/src/unityshell.cpp
+++ b/plugins/unityshell/src/unityshell.cpp
@@ -3157,9 +3157,73 @@ bool UnityWindow::glDraw(const GLMatrix& matrix,
 
   auto draw_panel_shadow = DrawPanelShadow::NO;
 
+  if (!(mask & PAINT_WINDOW_ON_TRANSFORMED_SCREEN_MASK))
+  {
+    Window active_window = screen->activeWindow();
+
+    if (G_UNLIKELY(window_type == CompWindowTypeDesktopMask))
+    {
+      uScreen->setPanelShadowMatrix(matrix);
+
+      if (active_window == 0 || active_window == window->id())
+      {
+        if (PluginAdapter::Default().IsWindowOnTop(window->id()))
+        {
+          draw_panel_shadow = DrawPanelShadow::OVER_WINDOW;
+        }
+        uScreen->is_desktop_active_ = true;
+      }
+    }
+    else
+    {
+      if (window->id() == active_window)
+      {
+        draw_panel_shadow = DrawPanelShadow::BELOW_WINDOW;
+        uScreen->is_desktop_active_ = false;
+
+        if (!(window_state & CompWindowStateMaximizedVertMask) &&
+            !(window_state & CompWindowStateFullscreenMask) &&
+            !(window_type & CompWindowTypeFullscreenMask))
+        {
+          auto const& output = uScreen->screen->currentOutputDev();
+          int monitor = uScreen->WM.MonitorGeometryIn(NuxGeometryFromCompRect(output));
+
+          if (window->y() - window->border().top < output.y() + uScreen->panel_style_.PanelHeight(monitor))
+          {
+            draw_panel_shadow = DrawPanelShadow::OVER_WINDOW;
+          }
+        }
+      }
+      else if (uScreen->menus_->integrated_menus())
+      {
+        draw_panel_shadow = DrawPanelShadow::BELOW_WINDOW;
+      }
+      else
+      {
+        if (uScreen->is_desktop_active_)
+        {
+          if (PluginAdapter::Default().IsWindowOnTop(window->id()))
+          {
+            draw_panel_shadow = DrawPanelShadow::OVER_WINDOW;
+            uScreen->panelShadowPainted = CompRegion();
+          }
+        }
+      }
+    }
+  }
+
+  if (locked)
+    draw_panel_shadow = DrawPanelShadow::NO;
+
+  if (draw_panel_shadow == DrawPanelShadow::BELOW_WINDOW)
+    uScreen->paintPanelShadow(region);
+
   deco_win_->Draw(matrix, attrib, region, mask);
   bool ret = gWindow->glDraw(matrix, attrib, region, mask);
 
+  if (draw_panel_shadow == DrawPanelShadow::OVER_WINDOW)
+    uScreen->paintPanelShadow(region);
+
   return ret;
 }
 
diff --git a/plugins/unityshell/unityshell.xml.in b/plugins/unityshell/unityshell.xml.in
index 61afdea..3fdd5f3 100644
--- a/plugins/unityshell/unityshell.xml.in
+++ b/plugins/unityshell/unityshell.xml.in
@@ -419,7 +419,7 @@
                 <option name="icon_size" type="int">
                     <_short>Launcher Icon Size</_short>
                     <_long>The size of the icons in the Launcher.</_long>
-                    <default>44</default>
+                    <default>48</default>
                     <min>8</min>
                     <max>64</max>
                     <precision>1</precision>
diff --git a/unity-shared/DashStyle.cpp b/unity-shared/DashStyle.cpp
index b0c3eac..a8ca838 100755
--- a/unity-shared/DashStyle.cpp
+++ b/unity-shared/DashStyle.cpp
@@ -374,8 +374,35 @@ Style::Impl::~Impl()
 
 void Style::Impl::Refresh()
 {
-  text_width_ = 56;
-  text_height_ = 12;
+  const char* const SAMPLE_MAX_TEXT = "Chromium Web Browser";
+
+  nux::CairoGraphics util_cg(CAIRO_FORMAT_ARGB32, 1, 1);
+  cairo_t* cr = util_cg.GetInternalContext();
+
+  auto const& font = theme::Settings::Get()->font();
+  PangoFontDescription* desc = ::pango_font_description_from_string(font.c_str());
+  ::pango_font_description_set_weight(desc, PANGO_WEIGHT_NORMAL);
+  ::pango_font_description_set_size(desc, 9 * PANGO_SCALE);
+
+  glib::Object<PangoLayout> layout(::pango_cairo_create_layout(cr));
+  ::pango_layout_set_font_description(layout, desc);
+  ::pango_layout_set_text(layout, SAMPLE_MAX_TEXT, -1);
+
+  PangoContext* cxt = ::pango_layout_get_context(layout);
+
+  GdkScreen* screen = ::gdk_screen_get_default();
+  ::pango_cairo_context_set_font_options(cxt, ::gdk_screen_get_font_options(screen));
+  ::pango_cairo_context_set_resolution(cxt, 96.0 * Settings::Instance().font_scaling());
+  ::pango_layout_context_changed(layout);
+
+  PangoRectangle log_rect;
+  ::pango_layout_get_pixel_extents(layout, NULL, &log_rect);
+  text_width_ = log_rect.width;
+  text_height_ = log_rect.height;
+
+  owner_->changed.emit();
+
+  pango_font_description_free(desc);
 }
 
 void Style::Impl::UpdateFormFactor(FormFactor form_factor)
@@ -2214,33 +2241,33 @@ nux::Color const& Style::GetTextColor() const
 
 RawPixel Style::GetTileGIconSize() const
 {
-  return 48;
+  return 64;
 }
 
 RawPixel Style::GetTileImageSize() const
 {
-  return 48;
+  return 96;
 }
 
 RawPixel Style::GetTileWidth() const
 {
-  return std::max(pimpl->text_width_, 106);
+  return std::max(pimpl->text_width_, 150);
 }
 
 RawPixel Style::GetTileHeight() const
 {
   return std::max(GetTileImageSize() + (pimpl->text_height_ * 2) + 15,
-                  GetTileImageSize() + 80); // magic design numbers.
+                  GetTileImageSize() + 32); // magic design numbers.
 }
 
 RawPixel Style::GetTileIconHightlightHeight() const
 {
-  return 48;
+  return 106;
 }
 
 RawPixel Style::GetTileIconHightlightWidth() const
 {
-  return 48;
+  return 106;
 }
 
 RawPixel Style::GetHomeTileIconSize() const
@@ -2341,7 +2368,7 @@ RawPixel Style::GetHSeparatorSize() const
 
 RawPixel Style::GetFilterBarWidth() const
 {
-  return 250;
+  return 300;
 }
 
 RawPixel Style::GetFilterBarLeftPadding() const
@@ -2396,7 +2423,7 @@ RawPixel Style::GetFilterHighlightPadding() const
 
 RawPixel Style::GetSpaceBetweenFilterWidgets() const
 {
-  return 6;
+  return 12;
 }
 
 RawPixel Style::GetAllButtonHeight() const
@@ -2476,12 +2503,12 @@ RawPixel Style::GetPlacesGroupTopSpace() const
 
 RawPixel Style::GetPlacesGroupResultTopPadding() const
 {
-  return 19;
+  return 2;
 }
 
 RawPixel Style::GetPlacesGroupResultLeftPadding() const
 {
-  return 19;
+  return 25;
 }
 
 RawPixel Style::GetCategoryHeaderLeftPadding() const
-- 
2.39.2

