diff --git a/zim/main/__init__.py b/zim/main/__init__.py
index bc4f58f31..2817ad2a3 100644
--- a/zim/main/__init__.py
+++ b/zim/main/__init__.py
@@ -668,7 +668,6 @@ def build_command(args, pwd=None):
 	@raises UsageError: if args is not correct
 	'''
 	args = list(args)
-
 	if args and args[0] == '--plugin':
 		args.pop(0)
 		try:
diff --git a/zim/main/application.py b/zim/main/application.py
index 88c2b3f07..d7e37186b 100644
--- a/zim/main/application.py
+++ b/zim/main/application.py
@@ -3,6 +3,7 @@
 # This class is in a seperate module to avoid Gtk imports in the main module
 # imports are a bit circular
 
+import os
 import logging
 import signal
 from typing import List, Optional
@@ -16,6 +17,7 @@
 
 from . import _application_startup, build_command, UsageError
 
+
 class ZimGtkApplication(Gtk.Application):
 	
 	APPLICATION_ID = 'org.zim_wiki.Zim' # For practical reasons use "_" instead of "-"
@@ -59,7 +61,12 @@ def do_command_line(self, gcommandline):
 		# Handler in primary process to process commandline and start application
 		# if started from remote process, the exit code is given back to that process
 		# and it exits while primary process keeps running as long as there are windows
-		return self.run_commandline(gcommandline.get_arguments()[1:], gcommandline.get_cwd())
+		args = gcommandline.get_arguments()
+		if 'python' in os.path.basename(args[0]):
+			args = args[2:] # strip python interpreter and zim script name
+		else:
+			args = args[1:] # strip zim executable name
+		return self.run_commandline(args, gcommandline.get_cwd())
 
 	def run_commandline(self, args: List[str], pwd: Optional[str] = None) -> int:
 		'''Run a commandline in the current process
@@ -76,9 +83,14 @@ def run_commandline(self, args: List[str], pwd: Optional[str] = None) -> int:
 			print(err, file=sys.stderr)
 			return 1
 		else:
-			if window:
+			if window and isinstance(window, Gtk.Window):
 				self.add_window(window)
-			window.present()
+				window.present()
+			elif window:
+				# E.g. trayicon, not a window, but we need to hold application
+				self.hold()
+				window.connect('destroy', lambda *a: self.release())
+
 			return 0
 
 	def open_notebook(self, location, pagelink=None):
diff --git a/zim/plugins/trayicon.py b/zim/plugins/trayicon.py
index 02fb977e2..6bcb42163 100644
--- a/zim/plugins/trayicon.py
+++ b/zim/plugins/trayicon.py
@@ -2,6 +2,7 @@
 # Copyright 2009-2014 Jaap Karssenberg <jaap.karssenberg@gmail.com>
 
 from gi.repository import GObject
+from gi.repository import Gio
 from gi.repository import Gtk
 
 import logging
@@ -43,12 +44,12 @@ def set_global_trayicon(classic=False):
 
 	if GLOBAL_TRAYICON and isinstance(GLOBAL_TRAYICON, cls):
 		return None
-	else:
-		new = cls()
-		if GLOBAL_TRAYICON:
-			GLOBAL_TRAYICON.destroy()
-		GLOBAL_TRAYICON = cls()
-		return GLOBAL_TRAYICON
+
+	if GLOBAL_TRAYICON:
+		GLOBAL_TRAYICON.destroy()
+
+	GLOBAL_TRAYICON = cls()
+	return GLOBAL_TRAYICON
 
 
 class TrayIconPluginCommand(GtkCommand):
@@ -124,6 +125,9 @@ class TrayIconBase(object):
 	Contains code to create the tray icon menus.
 	'''
 
+	def get_application(self):
+		return Gio.Application.get_default()
+
 	def get_trayicon_menu(self):
 		'''Returns the main 'tray icon menu'''
 		menu = Gtk.Menu()
@@ -221,8 +225,7 @@ def do_activate_notebook(self, uri):
 
 	def do_quit(self):
 		'''Quit zim.'''
-		if Gtk.main_level() > 0:
-			Gtk.main_quit()
+		self.get_application().quit()
 
 	def do_open_notebook(self):
 		'''Opens the notebook dialogs'''
@@ -244,7 +247,7 @@ class StatusIconTrayIcon(TrayIconBase, Gtk.StatusIcon):
 	}
 
 	def __init__(self):
-		GObject.GObject.__init__(self)
+		Gtk.StatusIcon.__init__(self)
 
 		icon_theme = Gtk.IconTheme.get_default()
 		if icon_theme.has_icon('zim-panel'):
@@ -276,13 +279,13 @@ def do_popup_menu_notebooks(self, list, button=1, activate_time=0):
 		menu = Gtk.Menu()
 		self.populate_menu_with_notebooks(menu, list)
 		menu.show_all()
-		menu.popup(None, None, Gtk.StatusIcon.position_menu, self, button, activate_time)
+		menu.popup(None, None, None, self, button, activate_time)
 
 	def do_popup_menu(self, button=3, activate_time=0):
 		#~ print('>>', button, activate_time)
 		menu = self.get_trayicon_menu()
 		menu.show_all()
-		menu.popup(None, None, Gtk.StatusIcon.position_menu, self, button, activate_time)
+		menu.popup(None, None, None, self, button, activate_time)
 
 	def destroy(self):
 		self.set_property('visible', False)
