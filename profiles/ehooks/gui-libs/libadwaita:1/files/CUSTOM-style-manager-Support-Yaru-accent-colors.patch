From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Tue, 5 Apr 2022 16:00:46 +0200
Subject: style-manager: Support Yaru accent colors

Generate the libadwaita color schemes using Yaru accent colors.
Then, when the Yaru theme is used in the system, use the generated
variant instead of the default one.
Also the yaru colors palette is used in such case.

No theme changes are applied, only the accent color is now matching
the yaru ones.

Forwarded: not-needed
---
 meson_options.txt                                |   4 +
 src/adw-settings-impl-portal.c                   |  25 +++
 src/adw-settings-impl-private.h                  |  12 ++
 src/adw-settings-private.h                       |   2 +
 src/adw-settings.c                               | 228 +++++++++++++++++++++--
 src/adw-style-manager.c                          |  71 ++++++-
 src/stylesheet/_colors.scss                      |   6 +
 src/stylesheet/_defaults.scss                    |   7 +-
 src/stylesheet/_palette-yaru.scss                | 118 ++++++++++++
 src/stylesheet/adwaita-stylesheet.gresources.xml |   1 +
 src/stylesheet/meson.build                       |  88 ++++++++-
 src/stylesheet/sass-utils.scss                   | 212 +++++++++++++++++++++
 src/stylesheet/yaru_accent_colors.scss           |  75 ++++++++
 13 files changed, 827 insertions(+), 22 deletions(-)
 create mode 100644 src/stylesheet/_palette-yaru.scss
 create mode 100644 src/stylesheet/sass-utils.scss
 create mode 100644 src/stylesheet/yaru_accent_colors.scss

diff --git a/meson_options.txt b/meson_options.txt
index b95d0ae..2ef9779 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -20,3 +20,7 @@ option('tests',
 option('examples',
        type: 'boolean', value: true,
        description: 'Build and install the examples and demo applications (currently not built for MSVC builds)')
+
+option('yaru-accent-colors',
+       type: 'boolean', value: true,
+       description: 'Mimic Yaru accent colors')
diff --git a/src/adw-settings-impl-portal.c b/src/adw-settings-impl-portal.c
index 7e52014..e743459 100644
--- a/src/adw-settings-impl-portal.c
+++ b/src/adw-settings-impl-portal.c
@@ -294,3 +294,28 @@ adw_settings_impl_portal_new (gboolean enable_color_scheme,
 
   return ADW_SETTINGS_IMPL (self);
 }
+
+gboolean adw_settings_impl_portal_enabled (AdwSettingsImpl *self) {
+  return ADW_IS_SETTINGS_IMPL_PORTAL (self) &&
+    ADW_SETTINGS_IMPL_PORTAL (self)->settings_portal != NULL;
+}
+
+GDBusProxy *
+adw_settings_impl_portal_get_proxy (AdwSettingsImpl *self)
+{
+  g_return_val_if_fail (ADW_IS_SETTINGS_IMPL_PORTAL (self), NULL);
+
+  return ADW_SETTINGS_IMPL_PORTAL (self)->settings_portal;
+}
+
+gboolean
+adw_settings_impl_portal_read_setting (AdwSettingsImpl  *self,
+                                       const char       *schema,
+                                       const char       *name,
+                                       const char       *type,
+                                       GVariant        **out)
+{
+  g_return_val_if_fail (ADW_IS_SETTINGS_IMPL_PORTAL (self), FALSE);
+
+  return read_setting (ADW_SETTINGS_IMPL_PORTAL (self), schema, name, type, out);
+}
diff --git a/src/adw-settings-impl-private.h b/src/adw-settings-impl-private.h
index 44eade6..0c47bfd 100644
--- a/src/adw-settings-impl-private.h
+++ b/src/adw-settings-impl-private.h
@@ -40,6 +40,18 @@ gboolean adw_settings_impl_get_high_contrast (AdwSettingsImpl *self);
 void     adw_settings_impl_set_high_contrast (AdwSettingsImpl *self,
                                               gboolean         high_contrast);
 
+
+gboolean adw_settings_impl_portal_enabled (AdwSettingsImpl *self);
+
+#include <gio/gio.h>
+GDBusProxy *adw_settings_impl_portal_get_proxy (AdwSettingsImpl *self);
+
+gboolean adw_settings_impl_portal_read_setting (AdwSettingsImpl  *self,
+                                                const char       *schema,
+                                                const char       *name,
+                                                const char       *type,
+                                                GVariant        **out);
+
 #ifdef __APPLE__
 #define ADW_TYPE_SETTINGS_IMPL_MACOS (adw_settings_impl_macos_get_type())
 
diff --git a/src/adw-settings-private.h b/src/adw-settings-private.h
index bab0962..87ebea6 100644
--- a/src/adw-settings-private.h
+++ b/src/adw-settings-private.h
@@ -56,4 +56,6 @@ ADW_AVAILABLE_IN_ALL
 void adw_settings_override_high_contrast (AdwSettings *self,
                                           gboolean     high_contrast);
 
+const char *adw_settings_get_yaru_accent (AdwSettings *self);
+
 G_END_DECLS
diff --git a/src/adw-settings.c b/src/adw-settings.c
index 8a2dade..6e3ba7c 100644
--- a/src/adw-settings.c
+++ b/src/adw-settings.c
@@ -26,6 +26,9 @@ struct _AdwSettings
   gboolean high_contrast;
   gboolean system_supports_color_schemes;
 
+  GSettings *interface_settings;
+  gchar *yaru_accent;
+
   gboolean override;
   gboolean system_supports_color_schemes_override;
   AdwSystemColorScheme color_scheme_override;
@@ -39,6 +42,7 @@ enum {
   PROP_SYSTEM_SUPPORTS_COLOR_SCHEMES,
   PROP_COLOR_SCHEME,
   PROP_HIGH_CONTRAST,
+  PROP_YARU_ACCENT,
   LAST_PROP,
 };
 
@@ -132,6 +136,199 @@ register_impl (AdwSettings     *self,
   }
 }
 
+static void
+update_yaru_accent_from_theme (AdwSettings *self,
+                               const char *theme_name)
+{
+  g_autofree char *old_accent = g_steal_pointer (&self->yaru_accent);
+
+  if (self->override)
+    return;
+
+  g_assert (self->yaru_accent == NULL);
+
+  if (g_str_has_suffix (theme_name, "iance") ||
+      g_str_has_prefix (theme_name, "Yaru") ) {
+    if (g_str_equal (theme_name, "Ambiance") ||
+        g_str_equal (theme_name, "Yaru-dark") ||
+        g_str_equal (theme_name, "Yaru") ||
+        g_str_equal (theme_name, "Radiance")) {
+      self->yaru_accent = g_strdup ("default");
+    } else if (theme_name[4] == '-') {
+      g_auto (GStrv) theme_variant = NULL;
+
+      theme_variant = g_strsplit (theme_name, "-", -1);
+
+      if (g_strv_length (theme_variant) > 1)
+        self->yaru_accent = g_strdup (theme_variant[1]);
+    }
+  }
+
+  if (g_strcmp0 (old_accent, self->yaru_accent) != 0)
+    g_object_notify_by_pspec (G_OBJECT (self), props[PROP_YARU_ACCENT]);
+}
+
+static gboolean
+update_yaru_accent_from_gsettings (AdwSettings *self)
+{
+  g_autofree char *theme_name = NULL;
+
+  if (!self->interface_settings)
+    return FALSE;
+
+  theme_name = g_settings_get_string (self->interface_settings, "gtk-theme");
+  update_yaru_accent_from_theme (self, theme_name);
+
+  return TRUE;
+}
+
+static gboolean
+update_yaru_accent_from_gtk (AdwSettings *self)
+{
+  GdkDisplay *display = gdk_display_get_default ();
+  g_auto(GValue) value = G_VALUE_INIT;
+
+  if (!display)
+    return FALSE;
+
+  g_value_init (&value, G_TYPE_STRING);
+  if (!gdk_display_get_setting (display, "gtk-theme-name", &value))
+    return FALSE;
+
+  update_yaru_accent_from_theme (self, g_value_get_string (&value));
+
+  return TRUE;
+}
+
+static gboolean
+update_yaru_accent_from_portal (AdwSettings *self)
+{
+  g_autoptr (GVariant) variant = NULL;
+
+  if (!adw_settings_impl_portal_enabled (self->platform_impl))
+    return FALSE;
+
+  if (adw_settings_impl_portal_read_setting (self->platform_impl,
+                                             "org.gnome.desktop.interface",
+                                             "gtk-theme", "s", &variant)) {
+    update_yaru_accent_from_theme (self, g_variant_get_string (variant, NULL));
+    return TRUE;
+  }
+
+  return FALSE;
+}
+
+static void
+on_yaru_display_setting_changed (AdwSettings *self,
+                                 const char  *setting,
+                                 GdkDisplay  *display)
+{
+  if (!g_strcmp0 (setting, "gtk-theme-name"))
+    update_yaru_accent_from_gtk (self);
+}
+
+static void
+on_yaru_settings_portal_changed (GDBusProxy  *proxy,
+                                 const char  *sender_name,
+                                 const char  *signal_name,
+                                 GVariant    *parameters,
+                                 AdwSettings *self)
+{
+  g_autoptr(GVariant) value = NULL;
+  const char *namespace;
+  const char *name;
+
+  if (g_strcmp0 (signal_name, "SettingChanged") != 0)
+    return;
+
+  g_variant_get (parameters, "(&s&sv)", &namespace, &name, &value);
+
+  if (g_strcmp0 (namespace, "org.gnome.desktop.interface") == 0 &&
+      g_strcmp0 (name, "gtk-theme") == 0) {
+    update_yaru_accent_from_theme (self, g_variant_get_string (value, NULL));
+  }
+}
+
+typedef enum {
+  ADW_YARU_ACCENT_SOURCE_NONE,
+  ADW_YARU_ACCENT_SOURCE_PORTAL,
+  ADW_YARU_ACCENT_SOURCE_GTK,
+  ADW_YARU_ACCENT_SOURCE_GSETTINGS,
+} AdwYaruAccentSource;
+
+static AdwYaruAccentSource
+update_yaru_accent (AdwSettings *self)
+{
+  if (update_yaru_accent_from_portal (self))
+    return ADW_YARU_ACCENT_SOURCE_PORTAL;
+
+  if (update_yaru_accent_from_gtk (self))
+    return ADW_YARU_ACCENT_SOURCE_GTK;
+
+  if (update_yaru_accent_from_gsettings (self))
+    return ADW_YARU_ACCENT_SOURCE_GSETTINGS;
+
+  return ADW_YARU_ACCENT_SOURCE_NONE;
+}
+
+static gboolean
+is_running_in_flatpak (void)
+{
+  return g_file_test ("/.flatpak-info", G_FILE_TEST_EXISTS);
+}
+
+static void
+init_yaru_accents (AdwSettings *self)
+{
+  AdwYaruAccentSource accent_source;
+
+  if (!is_running_in_flatpak ())
+    {
+      GSettingsSchemaSource *source;
+      g_autoptr(GSettingsSchema) schema = NULL;
+
+      source = g_settings_schema_source_get_default ();
+      schema = g_settings_schema_source_lookup (source,
+                                                "org.gnome.desktop.interface",
+                                                TRUE);
+
+      if (schema && g_settings_schema_has_key (schema, "gtk-theme"))
+        self->interface_settings = g_settings_new ("org.gnome.desktop.interface");
+    }
+
+  accent_source = update_yaru_accent (self);
+
+  switch (accent_source) {
+    case ADW_YARU_ACCENT_SOURCE_PORTAL:
+      g_signal_connect (adw_settings_impl_portal_get_proxy (self->platform_impl),
+                        "g-signal",
+                        G_CALLBACK (on_yaru_settings_portal_changed), self);
+      break;
+
+    case ADW_YARU_ACCENT_SOURCE_GTK:
+      g_signal_connect_object (gdk_display_get_default (),
+                               "setting-changed",
+                               G_CALLBACK (on_yaru_display_setting_changed),
+                               self, G_CONNECT_SWAPPED);
+      break;
+
+    case ADW_YARU_ACCENT_SOURCE_GSETTINGS:
+      g_signal_connect_object (self->interface_settings,
+                               "changed::gtk-theme",
+                               G_CALLBACK (update_yaru_accent_from_gsettings),
+                               self, G_CONNECT_SWAPPED);
+      break;
+
+    case ADW_YARU_ACCENT_SOURCE_NONE:
+    default:
+      g_warning ("No source found for Yaru accent color");
+      break;
+  }
+
+  if (accent_source != ADW_YARU_ACCENT_SOURCE_GSETTINGS)
+    g_clear_object (&self->interface_settings);
+}
+
 static void
 adw_settings_constructed (GObject *object)
 {
@@ -155,17 +349,7 @@ adw_settings_constructed (GObject *object)
     register_impl (self, self->platform_impl, &found_color_scheme, &found_high_contrast);
   }
 
-  if (!found_color_scheme || !found_high_contrast) {
-    self->gsettings_impl = adw_settings_impl_gsettings_new (!found_color_scheme, !found_high_contrast);
-    register_impl (self, self->gsettings_impl, &found_color_scheme, &found_high_contrast);
-  }
-
-  if (!found_color_scheme || !found_high_contrast) {
-    self->legacy_impl = adw_settings_impl_legacy_new (!found_color_scheme, !found_high_contrast);
-    register_impl (self, self->legacy_impl, &found_color_scheme, &found_high_contrast);
-  }
-
-  self->system_supports_color_schemes = found_color_scheme;
+  init_yaru_accents (self);
 }
 
 static void
@@ -177,6 +361,9 @@ adw_settings_dispose (GObject *object)
   g_clear_object (&self->gsettings_impl);
   g_clear_object (&self->legacy_impl);
 
+  g_clear_object (&self->interface_settings);
+  g_clear_pointer (&self->yaru_accent, g_free);
+
   G_OBJECT_CLASS (adw_settings_parent_class)->dispose (object);
 }
 
@@ -201,6 +388,10 @@ adw_settings_get_property (GObject    *object,
     g_value_set_boolean (value, adw_settings_get_high_contrast (self));
     break;
 
+  case PROP_YARU_ACCENT:
+    g_value_set_string (value, adw_settings_get_yaru_accent (self));
+    break;
+
   default:
     G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
   }
@@ -231,6 +422,13 @@ adw_settings_class_init (AdwSettingsClass *klass)
                           FALSE,
                           G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
 
+  props[PROP_YARU_ACCENT] =
+    g_param_spec_string ("yaru-accent",
+                         "Yaru Accent",
+                         "Yaru Accent",
+                         NULL,
+                         G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
+
   g_object_class_install_properties (object_class, LAST_PROP, props);
 }
 
@@ -321,6 +519,8 @@ adw_settings_end_override (AdwSettings *self)
     g_object_notify_by_pspec (G_OBJECT (self), props[PROP_COLOR_SCHEME]);
   if (notify_hc)
     g_object_notify_by_pspec (G_OBJECT (self), props[PROP_HIGH_CONTRAST]);
+
+  update_yaru_accent (self);
 }
 
 void
@@ -375,3 +575,9 @@ adw_settings_override_high_contrast (AdwSettings *self,
 
   g_object_notify_by_pspec (G_OBJECT (self), props[PROP_HIGH_CONTRAST]);
 }
+
+const char *
+adw_settings_get_yaru_accent (AdwSettings *self)
+{
+  return self->yaru_accent;
+}
diff --git a/src/adw-style-manager.c b/src/adw-style-manager.c
index 073e789..5ac1e5a 100644
--- a/src/adw-style-manager.c
+++ b/src/adw-style-manager.c
@@ -70,6 +70,7 @@ enum {
   PROP_SYSTEM_SUPPORTS_COLOR_SCHEMES,
   PROP_DARK,
   PROP_HIGH_CONTRAST,
+  PROP_YARU_ACCENT,
   LAST_PROP,
 };
 
@@ -157,18 +158,48 @@ update_stylesheet (AdwStyleManager *self)
     if (adw_settings_get_high_contrast (self->settings))
       gtk_css_provider_load_from_resource (self->provider,
                                            "/org/gnome/Adwaita/styles/base-hc.css");
+    else if (adw_settings_get_yaru_accent (self->settings))
+      gtk_css_provider_load_from_resource (self->provider,
+                                           "/org/gnome/Adwaita/styles/base-yaru.css");
     else
       gtk_css_provider_load_from_resource (self->provider,
                                            "/org/gnome/Adwaita/styles/base.css");
   }
 
   if (self->colors_provider) {
+    g_autofree char *style = NULL;
+    g_autofree char *variant = NULL;
+
     if (self->dark)
-      gtk_css_provider_load_from_resource (self->colors_provider,
-                                           "/org/gnome/Adwaita/styles/defaults-dark.css");
+      variant = g_strdup ("defaults-dark");
     else
-      gtk_css_provider_load_from_resource (self->colors_provider,
-                                           "/org/gnome/Adwaita/styles/defaults-light.css");
+      variant = g_strdup ("defaults-light");
+
+    if (!adw_settings_get_high_contrast (self->settings)) {
+      const char *yaru_accent = adw_settings_get_yaru_accent (self->settings);
+
+      if (yaru_accent) {
+        g_autoptr (GFile) gresource = NULL;
+        g_autofree char *base_variant = g_steal_pointer (&variant);
+        g_autofree char *yaru_variant = NULL;
+        g_autofree char *resource_uri = NULL;
+
+        yaru_variant = g_strdup_printf ("%s-yaru-%s", base_variant, yaru_accent);
+        resource_uri = g_strdup_printf ("resource:///org/gnome/Adwaita/styles/%s.css", yaru_variant);
+        gresource = g_file_new_for_uri (resource_uri);
+
+        if (g_file_query_exists (gresource, NULL)) {
+          variant = g_steal_pointer (&yaru_variant);
+        } else {
+          variant = g_steal_pointer (&base_variant);
+          g_warning ("No known Yaru accent '%s'", yaru_accent);
+        }
+      }
+    }
+
+    style = g_strdup_printf ("/org/gnome/Adwaita/styles/%s.css", variant);
+    g_debug ("Using style %s", style);
+    gtk_css_provider_load_from_resource (self->colors_provider, style);
   }
 
   self->animation_timeout_id =
@@ -229,6 +260,14 @@ notify_high_contrast_cb (AdwStyleManager *self)
   g_object_notify_by_pspec (G_OBJECT (self), props[PROP_HIGH_CONTRAST]);
 }
 
+static void
+yaru_accent_changed_cb (AdwStyleManager *self)
+{
+  update_stylesheet (self);
+
+  g_object_notify_by_pspec (G_OBJECT (self), props[PROP_YARU_ACCENT]);
+}
+
 static void
 adw_style_manager_constructed (GObject *object)
 {
@@ -292,6 +331,11 @@ adw_style_manager_constructed (GObject *object)
                            G_CALLBACK (notify_high_contrast_cb),
                            self,
                            G_CONNECT_SWAPPED);
+  g_signal_connect_object (self->settings,
+                           "notify::yaru-accent",
+                           G_CALLBACK (yaru_accent_changed_cb),
+                           self,
+                           G_CONNECT_SWAPPED);
 
   update_dark (self);
   update_stylesheet (self);
@@ -339,6 +383,10 @@ adw_style_manager_get_property (GObject    *object,
     g_value_set_boolean (value, adw_style_manager_get_high_contrast (self));
     break;
 
+  case PROP_YARU_ACCENT:
+    g_value_set_string (value, adw_settings_get_yaru_accent (self->settings));
+    break;
+
   default:
     G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
   }
@@ -471,6 +519,21 @@ adw_style_manager_class_init (AdwStyleManagerClass *klass)
                           FALSE,
                           G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
 
+  /**
+   * AdwStyleManager:yaru-accent:
+   *
+   * The Yaru accent color used by the application, if any.
+   * This is only available in ubuntu.
+   *
+   * This cannot be overridden by applications.
+   */
+  props[PROP_YARU_ACCENT] =
+    g_param_spec_string ("yaru-accent",
+                         "Yaru Accent",
+                         "Yaru Accent",
+                         NULL,
+                         G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
+
   g_object_class_install_properties (object_class, LAST_PROP, props);
 }
 
diff --git a/src/stylesheet/_colors.scss b/src/stylesheet/_colors.scss
index edb6d46..f4225f4 100644
--- a/src/stylesheet/_colors.scss
+++ b/src/stylesheet/_colors.scss
@@ -115,3 +115,9 @@ $strong_disabled_opacity: 0.3;
   $trough_active_color: gtkalpha(currentColor, .5);
   $window_outline_color: transparentize(white, .7);
 }
+
+$is_yaru: false !default;
+@if $is_yaru {
+  $link_color: gtkcolor(yaru_link_color);
+  $link_visited_color: gtkcolor(yaru_link_visited_color);
+}
diff --git a/src/stylesheet/_defaults.scss b/src/stylesheet/_defaults.scss
index d671f4a..d064221 100644
--- a/src/stylesheet/_defaults.scss
+++ b/src/stylesheet/_defaults.scss
@@ -8,10 +8,13 @@
 // These are the colors apps are can override. We define the defaults here and
 // define variables for them in _colors.scss
 
+$accent_bg_color: '@blue_3' !default;
+$accent_color: #{if($variant == 'dark', #78aeed, "@blue_4")} !default
+
 // The main accent color and the matching text value
-@define-color accent_bg_color @blue_3;
+@define-color accent_bg_color #{$accent_bg_color};
 @define-color accent_fg_color white;
-@define-color accent_color #{if($variant == 'dark', #78aeed, "@blue_4")};
+@define-color accent_color #{$accent_color};
 
 // destructive-action buttons
 @define-color destructive_bg_color #{if($variant == 'dark', "@red_4", "@red_3")};
diff --git a/src/stylesheet/_palette-yaru.scss b/src/stylesheet/_palette-yaru.scss
new file mode 100644
index 0000000..a943a2e
--- /dev/null
+++ b/src/stylesheet/_palette-yaru.scss
@@ -0,0 +1,118 @@
+// Keep this in sync with
+//   https://github.com/ubuntu/yaru/blob/master/gtk/src/default/gtk-4.0/_palette.scss
+
+$blue_1: #75d3f4;
+$blue_2: #47c4f1;
+$blue_3: #19b6ee; // Yaru blue
+$blue_4: #007aa6; // Yaru linkblue
+$blue_5: #335280; // Yaru darkblue
+$green_1: #5aed70;
+$green_2: #47d35c;
+$green_3: #34b948;
+$green_4: #219e34;
+$green_5: #0e8420; // Yaru green
+$yellow_1: #fccd87;
+$yellow_2: #fbc16a;
+$yellow_3: #fbb44c;
+$yellow_4: #faa82f;
+$yellow_5: #f99b11; // Yaru yellow
+$orange_1: #f29879;
+$orange_2: #f08763;
+$orange_3: #ed764d;
+$orange_4: #eb6536;
+$orange_5: #e95420; // Yaru orange
+$red_1: #ea485c;
+$red_2: #de374c;
+$red_3: #d3273b;
+$red_4: #c7162b; // Yaru red
+$red_5: #a91224;
+$purple_1: #924d8b; // Yaru aubergine
+$purple_2: #762572; // Yaru purple
+$purple_3: #77216f; // Yaru light aubergine
+$purple_4: #5e2750; // Yaru mid aubergine
+$purple_5: #2c001e; // Yaru dark aubergine
+$brown_1: #e1b289;
+$brown_2: #c5976e;
+$brown_3: #aa7b53;
+$brown_4: #8e6038;
+$brown_5: #72441d;
+$light_1: #ffffff;
+$light_2: #f7f7f7; // Yaru porcelain
+$light_3: #ccc; // Yaru silk
+$light_4: #aea79f; // Yaru warm gray
+$light_5: #878787; // Yaru ash
+$dark_1: #666666; // Yaru graphite
+$dark_2: #5d5d5d; // Yaru slate
+$dark_3: #3d3d3d; // Yaru inkstone
+$dark_4: #181818; // Yaru jet
+$dark_5: #000000;
+
+$blue: $blue_3;
+$linkblue: $blue_4;
+$darkblue: $blue_5;
+$green: $green_5;
+$yellow: $yellow_5;
+$orange: $orange_5;
+$red: $red_4;
+$aubergine: $purple_1;
+$purple: $purple_2;
+$light_aubergine: $purple_3;
+$mid_aubergine: $purple_4;
+$dark_aubergine: $purple_5;
+$porcelain: $light_2;
+$silk: $light_3;
+$warm_gray: $light_4;
+$ash: $light_5;
+$graphite: $dark_1;
+$slate: $dark_2;
+$inkstone: $dark_3;
+$jet: $dark_4;
+
+// Sass thinks we're using the colors in the variables as strings and may shoot
+// warning, it's innocuous and can be defeated by using #{$var}.
+
+@define-color blue_1 #{$blue_1};
+@define-color blue_2 #{$blue_2};
+@define-color blue_3 #{$blue_3};
+@define-color blue_4 #{$blue_4};
+@define-color blue_5 #{$blue_5};
+@define-color green_1 #{$green_1};
+@define-color green_2 #{$green_2};
+@define-color green_3 #{$green_3};
+@define-color green_4 #{$green_4};
+@define-color green_5 #{$green_5};
+@define-color yellow_1 #{$yellow_1};
+@define-color yellow_2 #{$yellow_2};
+@define-color yellow_3 #{$yellow_3};
+@define-color yellow_4 #{$yellow_4};
+@define-color yellow_5 #{$yellow_5};
+@define-color orange_1 #{$orange_1};
+@define-color orange_2 #{$orange_2};
+@define-color orange_3 #{$orange_3};
+@define-color orange_4 #{$orange_4};
+@define-color orange_5 #{$orange_5};
+@define-color red_1 #{$red_1};
+@define-color red_2 #{$red_2};
+@define-color red_3 #{$red_3};
+@define-color red_4 #{$red_4};
+@define-color red_5 #{$red_5};
+@define-color purple_1 #{$purple_1};
+@define-color purple_2 #{$purple_2};
+@define-color purple_3 #{$purple_3};
+@define-color purple_4 #{$purple_4};
+@define-color purple_5 #{$purple_5};
+@define-color brown_1 #{$brown_1};
+@define-color brown_2 #{$brown_2};
+@define-color brown_3 #{$brown_3};
+@define-color brown_4 #{$brown_4};
+@define-color brown_5 #{$brown_5};
+@define-color light_1 #{$light_1};
+@define-color light_2 #{$light_2};
+@define-color light_3 #{$light_3};
+@define-color light_4 #{$light_4};
+@define-color light_5 #{$light_5};
+@define-color dark_1 #{$dark_1};
+@define-color dark_2 #{$dark_2};
+@define-color dark_3 #{$dark_3};
+@define-color dark_4 #{$dark_4};
+@define-color dark_5 #{$dark_5};
diff --git a/src/stylesheet/adwaita-stylesheet.gresources.xml b/src/stylesheet/adwaita-stylesheet.gresources.xml
index 98a07ac..0d86a06 100644
--- a/src/stylesheet/adwaita-stylesheet.gresources.xml
+++ b/src/stylesheet/adwaita-stylesheet.gresources.xml
@@ -5,6 +5,7 @@
     <file>base-hc.css</file>
     <file>defaults-light.css</file>
     <file>defaults-dark.css</file>
+    @ACCENTS_CSS@
 
     <file>assets/bullet-symbolic.symbolic.png</file>
     <file>assets/bullet@2-symbolic.symbolic.png</file>
diff --git a/src/stylesheet/meson.build b/src/stylesheet/meson.build
index 018cf4b..660f351 100644
--- a/src/stylesheet/meson.build
+++ b/src/stylesheet/meson.build
@@ -2,14 +2,66 @@ fs = import('fs')
 
 stylesheet_deps = []
 
+yaru_accent_colors_sassc = []
+
+if get_option('yaru-accent-colors')
+  YARU_ACCENTS = [
+      'default',
+      'bark',
+      'sage',
+      'olive',
+      'viridian',
+      'prussiangreen',
+      'blue',
+      'purple',
+      'magenta',
+      'red',
+  ]
+
+  yaru_accent_colors_sassc += configure_file(
+    command: [
+      'sh', '-c',
+        ';'.join([
+          'echo "\$is_yaru: true;"',
+          'sed s,palette,palette-yaru,g "$1"',
+        ]), '--', '@INPUT@',
+    ],
+    capture: true,
+    input: 'base.scss',
+    output: 'base-yaru.scss',
+  )
+
+  yaru_accent_colors = 'yaru_accent_colors.scss'
+  foreach accent: YARU_ACCENTS
+    foreach variant: ['light', 'dark']
+      yaru_accent_colors_sassc += configure_file(
+        configuration: {
+          'yaru_dark_variant': variant == 'dark' ? 'true' : 'false',
+          'yaru_accent_color': accent,
+          'yaru_theme_entry_point': (meson.project_source_root() /
+            '@0@'.format(files('defaults-@0@.scss'.format(variant))[0])),
+        },
+        input: yaru_accent_colors,
+        output: 'defaults-@0@-yaru-@1@.scss'.format(variant, accent),
+      )
+    endforeach
+  endforeach
+endif
+
+build_yaru_accent_colors = yaru_accent_colors_sassc.length() > 0
+
 # For git checkouts, but not for tarballs...
-if not fs.exists('base.css')
+if not fs.exists('base.css') or build_yaru_accent_colors
   sassc = find_program('sassc', required: false)
   if not sassc.found()
     subproject('sassc')
     sassc = find_program('sassc')
   endif
 
+  if build_yaru_accent_colors
+    assert(sassc.found(), 'No SSSC found, needed for accent colors!')
+  endif
+
   if sassc.found()
     sassc_opts = [ '-a', '-M', '-t', 'compact' ]
 
@@ -73,10 +125,21 @@ if not fs.exists('base.css')
       'defaults-dark',
     ]
 
+    if build_yaru_accent_colors
+      foreach accent_definition: yaru_accent_colors_sassc
+        scss_deps += accent_definition
+        scss_files += accent_definition
+      endforeach
+
+      scss_deps += yaru_accent_colors
+      sassc_opts += [ '-I', meson.project_build_root() ]
+      sassc_opts += [ '-I', meson.current_source_dir() ]
+    endif
+
     foreach scss: scss_files
-      stylesheet_deps += custom_target('@0@.scss'.format(scss),
-        input: '@0@.scss'.format(scss),
-        output: '@0@.css'.format(scss),
+      stylesheet_deps += custom_target('@0@.scss'.format(fs.name(scss)),
+        input: '@0@'.format(scss).endswith('.scss') ? scss : '@0@.scss'.format(scss),
+        output: '@0@.css'.format(fs.stem(scss)),
         command: [
           sassc, sassc_opts, '@INPUT@', '@OUTPUT@',
         ],
@@ -86,9 +149,24 @@ if not fs.exists('base.css')
   endif
 endif
 
+accents_css = []
+foreach accent_definition: yaru_accent_colors_sassc
+  accents_css += '<file alias="@0@">@1@/@2@</file>'.format(
+    fs.stem(accent_definition) + '.css', meson.project_build_root(),
+    fs.replace_suffix(accent_definition, '.css'))
+endforeach
+
+gresource_file = configure_file(
+  input: 'adwaita-stylesheet.gresources.xml',
+  output: '@BASENAME@',
+  configuration: {
+    'ACCENTS_CSS': accents_css.length() > 0 ? '\n'.join(accents_css) : '',
+  }
+)
+
 libadwaita_stylesheet_resources = gnome.compile_resources(
   'adwaita-stylesheet-resources',
-  'adwaita-stylesheet.gresources.xml',
+  gresource_file,
 
   source_dir: [
     # List in order of preference
diff --git a/src/stylesheet/sass-utils.scss b/src/stylesheet/sass-utils.scss
new file mode 100644
index 0000000..f7ea2c9
--- /dev/null
+++ b/src/stylesheet/sass-utils.scss
@@ -0,0 +1,212 @@
+// Copyright © 2022, Canonical Ltd
+//
+// This program is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library. If not, see <http://www.gnu.org/licenses/>.
+// Authors:
+//       Marco Trevisan <marco.trevisan@canonical.com>
+
+@function str-contains($str, $substring) {
+    @return str-index($str, $substring) != null;
+}
+
+@function str-starts-with($str, $substring) {
+    @return str-index($str, $substring) == 1;
+}
+
+@function str-ends-with($str, $substring) {
+    $index: str-index($str, $substring);
+    @if ($index == null) {
+        @return false;
+    }
+
+    @return ($index + str-length($substring) - 1) == str-length($str);
+}
+
+@function str-basename($str, $divider: '/') {
+    $index: str-index($str, $divider);
+
+    @while $index != null {
+        $str: str-slice($str, $index + 1);
+        $index: str-index($str, $divider);
+    }
+
+    @return $str;
+}
+
+@function str-extension($str) {
+    $extension: str-basename($str, '.');
+    @return if($extension == $str, null, $extension);
+}
+
+@function str-dirname($str, $divider: '/') {
+    $str_copy: $str;
+    $index: str-index($str, $divider);
+    $last_index: null;
+
+    @while $index != null {
+        $str: str-slice($str, $index + 1);
+        $last_index: if($last_index, $last_index, 0) + $index;
+        $index: str-index($str, $divider);
+    }
+
+    @return if($last_index, str-slice($str_copy, 1, $last_index - 1), '.');
+}
+
+@function list-length($list) {
+    @return length($list);
+}
+
+@function list-nth($list, $nth) {
+    $length: length($list);
+    @if ($length == 0 or abs($nth) > $length) {
+        @return null;
+    }
+
+    @if ($nth >= 0) {
+        $nth: $nth + 1;
+    }
+
+    @return nth($list, $nth);
+}
+
+@function list-index($list, $item) {
+    $i: 0;
+    @each $e in $list {
+        @if ($e == $item) {
+            @return $i;
+        }
+
+        $i: $i + 1;
+    }
+
+    @return null;
+}
+
+@function pow($base, $exponent, $root: 1) {
+    @if ($exponent == 0) {
+        @return 1;
+    }
+
+    @if ($base == 0) {
+        @return 0;
+    }
+
+    @if ($root != 1) {
+        @if ($exponent == $root) {
+            @return $base;
+        }
+        $base: nth-root($base, $root);
+    }
+
+    @if $exponent < 0 {
+        $base: 1 / $base;
+        $exponent: -$exponent;
+    } @else if ($exponent % 2 == 0) {
+        $half-pow: pow($base, $exponent / 2);
+        @return $half-pow * $half-pow;
+    }
+
+    $i: 1;
+    $val: $base;
+    @while ($i < $exponent) {
+        $val: $val * $base;
+        $i: $i + 1;
+    }
+
+    @return $val;
+}
+
+@function nth-root($value, $n, $max_iterations: 100) {
+    @if ($n <= 0) {
+        @error "Not supported"
+    }
+
+    @if ($n == 1 or $value == 0) {
+        @return $value;
+    }
+
+    $i: 1;
+    $pre-val: 1;
+    @while ($i < $max_iterations) {
+        $val: (1.0 / $n) * ((($n - 1) * $pre-val) + $value / pow($pre-val, $n - 1));
+
+        @if ($pre-val == $val) {
+            @return $val;
+        }
+
+        $pre-val: $val;
+        $i: $i + 1;
+    }
+
+    @error ("Failed to compute " + $n + "th root of " + $value + " in " +
+            $max_iterations + " iterations");
+}
+
+@function truncate($value, $decimals: 10) {
+    @if ($decimals < 0) {
+        @error "Not supported"
+    }
+
+    $multiplier: pow(10, $decimals);
+    @return floor($value * $multiplier) / $multiplier;
+}
+
+// Credits to https://css-tricks.com/snippets/sass/luminance-color-function/
+@function luminance($color) {
+    $colors: (
+        'red': red($color),
+        'green': green($color),
+        'blue': blue($color)
+    );
+
+    @each $name, $value in $colors {
+        $adjusted: 0;
+        $value: $value / 255;
+
+        @if $value < 0.03928 {
+            $value: $value / 12.92;
+        } @else {
+            $value: ($value + .055) / 1.055;
+            $value: pow($value, 12, 5);
+        }
+
+        $colors: map-merge($colors, ($name: $value));
+    }
+
+    @return ((map-get($colors, 'red') * .2126) +
+             (map-get($colors, 'green') * .7152) +
+             (map-get($colors, 'blue') * .0722));
+}
+
+@function color-contrast($color1, $color2) {
+    $c1-luminance: luminance($color1);
+    $c2-luminance: luminance($color2);
+
+    $lighter-luminance: max($c1-luminance, $c2-luminance);
+    $darker-luminance: min($c1-luminance, $c2-luminance);
+
+    @return ($lighter-luminance + 0.05) / ($darker-luminance + 0.05);
+}
+
+@function optimize-contrast($bg, $fg, $large-text: false, $target: 4.5) {
+    @if ($large-text and $target == 4.5) {
+        $target: 3;
+    }
+
+    $dark-bg: luminance($bg) < luminance($fg);
+    @while (color-contrast($bg, $fg) < $target) {
+        $fg: if($dark-bg, lighten($fg, 0.1), darken($fg, 0.1));
+    }
+
+    @return $fg;
+}
diff --git a/src/stylesheet/yaru_accent_colors.scss b/src/stylesheet/yaru_accent_colors.scss
new file mode 100644
index 0000000..a1aa8ee
--- /dev/null
+++ b/src/stylesheet/yaru_accent_colors.scss
@@ -0,0 +1,75 @@
+// Keep this in sync with
+//   https://github.com/ubuntu/yaru/blob/master/common/accent-colors.scss.in
+
+@function get_accent_color($accent_color, $is_dark: false) {
+    $color: null;
+    @if $accent_color == 'default' {
+        $color: #E95420;
+    } @else if $accent_color == 'bark' {
+        $color: #787859;
+    } @else if $accent_color == 'sage' {
+        $color: #657B69;
+    } @else if $accent_color == 'olive' {
+        $color: #4B8501;
+    } @else if $accent_color == 'viridian' {
+        $color: #03875B;
+    } @else if $accent_color == 'prussiangreen' {
+        $color: #308280;
+    } @else if $accent_color == 'blue' {
+        $color: #0073E5;
+    } @else if $accent_color == 'purple' {
+        $color: #7764D8;
+    } @else if $accent_color == 'magenta' {
+        $color: #B34CB3;
+    } @else if $accent_color == 'red' {
+        $color: #DA3450;
+    } @else {
+        @error('No known accent color defined!');
+    }
+    @debug('Using accent color ' + $accent_color + ': ' + $color);
+    @return $color;
+}
+
+$yaru_is_dark_variant: @yaru_dark_variant@;
+$yaru_accent_bg_color: get_accent_color('@yaru_accent_color@', $yaru_is_dark_variant);
+$accent_bg_color: $yaru_accent_bg_color;
+$accent_color: $yaru_accent_bg_color;
+@debug("Accent color is " + $yaru_accent_bg_color);
+
+@import '@yaru_theme_entry_point@';
+
+// Optimize accent-color definition for default background colors
+@import 'sass-utils';
+@import 'palette-yaru';
+@import 'functions';
+
+@if str-contains('@yaru_theme_entry_point@', 'stylesheet/defaults') {
+    $window-bg-color: if($variant == 'light', #FAFAFA, lighten($jet, 8%));
+    $window-fg-color: if($variant == 'light', $inkstone, $porcelain);
+    @define-color window_bg_color #{$window-bg-color};
+    @define-color window_fg_color #{$window-fg-color};
+
+    @define-color warning_fg_color #{$window-fg-color};
+    @define-color view_fg_color #{$window-fg-color};
+    @define-color headerbar_fg_color #{$window-fg-color};
+    @define-color headerbar_backdrop_color #{$window-bg-color};
+    @define-color headerbar_border_color #{$window-fg-color};
+    @define-color card_fg_color #{$window-fg-color};
+    @define-color dialog_fg_color #{$window-fg-color};
+    @define-color popover_fg_color #{$window-fg-color};
+    @define-color thumbnail_fg_color #{$window-fg-color};
+
+    $contrast_target: if($variant=='light', 4.5, 4.8);
+    $yaru-accent-color: optimize-contrast($window-bg-color,
+        $yaru_accent_bg_color, $target: $contrast_target);
+    @define-color yaru_accent_color #{$yaru-accent-color};
+    @define-color yaru_accent_bg_color #{$yaru_accent_bg_color};
+    @define-color accent_color #{$yaru-accent-color};
+
+    $contrast_target: if($variant=='light', 4.5, 6);
+    $link-color: optimize-contrast($window-bg-color,
+        $accent-color, $target: $contrast_target);
+    $link-visited-color: gtkmix($link-color, $window-fg-color, 80%) !default;
+    @define-color yaru_link_color #{$link-color};
+    @define-color yaru_link_visited_color #{$link-visited-color};
+}
